const fs = require('fs');
const path = require('path');
const mime = require('mime-types');
const { execSync } = require('child_process');

// 递归获取文件列表
function getAllFiles(dirPath, arrayOfFiles = []) {
    const files = fs.readdirSync(dirPath);

    files.forEach(file => {
        const filePath = path.join(dirPath, file);
        if (fs.statSync(filePath).isDirectory()) {
            arrayOfFiles = getAllFiles(filePath, arrayOfFiles);
        } else {
            arrayOfFiles.push(path.relative(process.cwd(), filePath));
        }
    });

    return arrayOfFiles;
}

// 文件转换逻辑
function convertFileToJS(filePath) {
    const mimeType = mime.lookup(filePath) || 'application/octet-stream';
    const isText = mimeType.startsWith('text/') ||
        mimeType === 'application/json' ||
        mimeType === 'application/javascript';

    try {
        let content;
        if (isText) {
            content = fs.readFileSync(filePath, 'utf8');
            return `'${content.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/\n/g, '\\n')}'`;
        } else {
            const buffer = fs.readFileSync(filePath);
            const base64 = buffer.toString('base64');
            return `'data:${mimeType};base64,${base64}'`;
        }
    } catch (err) {
        console.error(`❌ 读取文件错误 ${filePath}:`, err);
        return 'null';
    }
}

// 主构建函数
function build(options = {}) {
    const config = {
        inputDir: './src',
        outputFile: './build/index.js',
        generateId: true,
        generateManifest: true,
        ...options
    };

    // 创建输出目录
    const buildDir = path.dirname(config.outputFile);
    if (!fs.existsSync(buildDir)) {
        fs.mkdirSync(buildDir, { recursive: true });
    }

    // 生成ID文件逻辑
    if (config.generateId) {
        const idFilePath = path.join(buildDir, 'id.npem');
        if (!fs.existsSync(idFilePath)) {
            try {
                console.log('🆔 正在生成唯一标识...');
                execSync(`node "${path.join(__dirname, 'generate-id.js')}"`, {
                    stdio: 'inherit',
                    cwd: process.cwd()
                });
                console.log('🆔 唯一标识生成成功');
                console.log('ℹ️ 请妥善保存此唯一标识，丢失无法复原');
            } catch (err) {
                console.error('❌ 生成ID文件失败:', err);
                process.exit(1);
            }
        }
    }

    // 生成清单文件逻辑
    if (config.generateManifest) {
        const manifestPath = path.join(buildDir, 'manifest.json');
        if (!fs.existsSync(manifestPath)) {
            try {
                const idFilePath = path.join(buildDir, 'id.npem');
                const id = fs.existsSync(idFilePath)
                    ? fs.readFileSync(idFilePath, 'utf8').trim()
                    : '';

                const manifest = {
                    name: "My Plugin",
                    version: "1.0.0",
                    updateUrl: "[只需填写更新目录 // please fill in the update directory only.]",
                    id: id,
                    description: "[介绍 // description]",
                    picture: [
                        "[PicURL1]",
                        "[PicURL2]"
                    ]
                };
                fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
                console.log('✅ 清单文件已创建');
            } catch (err) {
                console.error('❌ 创建清单文件失败:', err);
                process.exit(1);
            }
        }
    }

    // 主处理逻辑
    if (!fs.existsSync(config.inputDir)) {
        throw new Error(`❌ 目录不存在: ${config.inputDir}`);
    }

    const allFiles = getAllFiles(config.inputDir);

    // 生成JS输出内容
    const entries = allFiles.map(filePath => {
        const relativePath = path.relative(config.inputDir, filePath);
        const jsContent = convertFileToJS(filePath);
        return `  '${relativePath}': ${jsContent}`;
    }).join(',\n');

    const jsOutput = `// Generated by NitaiFarmePluginDev
const resources = {
${entries}
};

if (typeof module !== 'undefined' && module.exports) {
    module.exports = resources;
} else {
    window.resources = resources;
}`;

    fs.writeFileSync(config.outputFile, jsOutput);
    return { fileCount: allFiles.length };
}

module.exports = { build };